jacob
names(jacob) <- c("k", "l", "m")
jacob
b <- data.frame(
"a" = c(1,2,3),
"bc" = c(4,5,6),
"def = c(7,8,9)
)
b
b
b <- data.frame(
"a" = c(1,2,3),
"bc" = c(4,5,6),
"def" = c(7,8,9)
)
because <- data.frame(
"a" = c(1,2,3),
"bc" = c(4,5,6),
"def" = c(7,8,9)
)
because
because$ghij<-jacob
because
because$ghij$m
because[,"ghij"][3]
because[[c(3,3)]]
because[[c(4,3)]]
with(because,m)
with(because,ghij)
with(because,c(ghij,m))
with(with(because,ghij), m)
plot(Petal.Length ~ Petal.Width, data=iris)
plot(Petal.Length ~ Petal.Width, data=iris, main="The Classic Iris Data")
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris)
plot(main="The Classic Iris Data")
plot(Petal.Length ~ Petal.Width, data=iris[,"Species" == "setosa"], main="The Classic Iris Data")
plot(Petal.Length ~ Petal.Width, data=iris[,"Species" == "setosa"], main="The Classic Iris Data")
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data")
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "verginica",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data")
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "verginica",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data")
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data",xlim=0:3, ylim=0:8)
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data",xlim=0:3, ylim=0:8)
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data",xlim=0:3, ylim=0:8)
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE, xlim=0:3, ylim=0:8)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE, xlim=(0:3), ylim=0:8)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data",xlim=0:3, ylim=0:8)
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE, xlim=(0:3), ylim=0:8)
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data",xlim=0:3, ylim=0:8)
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE, xlim=c(0,3), ylim=c(0,8)
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data",xlim=c(0,3), ylim=c(0,8))
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE)
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris)
with(iris[iris$Species == "setosa",], plot(Petal.Length ~ Petal.Width), main="The Classic Iris Data",xlim=c(0,3), ylim=c(0,8))
with(iris[iris$Species == "versicolor",], plot(Petal.Length ~ Petal.Width), add=TRUE)
with(iris[iris$Species == "virginica",], plot(Petal.Length ~ Petal.Width), add=TRUE,xlim=c(0,3), ylim=c(0,8))
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris)
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8))
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8), pch=Species)
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8), pch=iris$Species)
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8), pch=as.integer(iris$Species))
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8), pch=point_type)
point_type <- c()
point_type[iris$Species == "setosa"] <- 2
point_type[iris$Species == "versicolor"] <- 1
point_type[iris$Species == "virginica"] <- 6
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8), pch=point_type)
point_type <- c()
point_type[iris$Species == "setosa"] <- 2
point_type[iris$Species == "versicolor"] <- 1
point_type[iris$Species == "virginica"] <- 6
point_color <- c()
point_type[iris$Species == "setosa"] <- "red"
point_type[iris$Species == "versicolor"] <- "green"
point_type[iris$Species == "virginica"] <- "blue"
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8), pch=point_type, col=point_color, main="THE Classic Iris Data")
point_color
point_color <- c()
point_type[iris$Species == "setosa"] <- "red"
point_type[iris$Species == "versicolor"] <- "green"
point_type[iris$Species == "virginica"] <- "blue"
point_color
point_type <- c()
point_type[iris$Species == "setosa"] <- 2
point_type[iris$Species == "versicolor"] <- 1
point_type[iris$Species == "virginica"] <- 6
point_color <- c()
point_color[iris$Species == "setosa"] <- "red"
point_color[iris$Species == "versicolor"] <- "green"
point_color[iris$Species == "virginica"] <- "blue"
plot(Petal.Length ~ Petal.Width, data=iris,xlim=c(0,3), ylim=c(0,8), pch=point_type, col=point_color, main="The Classic Iris Data")
abline(lm_iris)
legend("bottomright", labels= c("setosa","versicolor", "virginica" ), pch = c(2,1,6), col=c("red","green", "blue", inset=0.1))
legend("bottomright", c("setosa","versicolor", "virginica" ), pch = c(2,1,6), col=c("red","green", "blue", inset=0.1))
abline(lm_iris)
legend("bottomright", c("setosa","versicolor", "virginica" ), pch = c(2,1,6), col=c("red","green", "blue"), inset=0.1, cex=0.75)
point_type <- c()
point_type[iris$Species == "setosa"] <- 2
point_type[iris$Species == "versicolor"] <- 1
point_type[iris$Species == "virginica"] <- 6
point_color <- c()
point_color[iris$Species == "setosa"] <- "red"
point_color[iris$Species == "versicolor"] <- "green"
point_color[iris$Species == "virginica"] <- "blue"
plot(Petal.Length ~ Petal.Width,
data=iris,xlim=c(0,3), ylim=c(0,8),xlab="Petal Width",ylab="Petal Length",
pch=point_type, col=point_color, main="The Classic Iris Data")
lm_iris <- lm(Petal.Length ~ Petal.Width, data= iris)
abline(lm_iris)
legend("bottomright", c("setosa","versicolor", "virginica" ), pch = c(2,1,6), col=c("red","green", "blue"), inset=0.1, cex=0.75)
hx <- hist(x, plot = FALSE)
hy <- hist(y, plot = FALSE)
r <- range(hx$breaks, hy$breaks)
b <- seq(r[1], r[2], diff(r) / 11)
# Every command below this comment has at least one mistake.
hist(x, col = "red", density = TRUE, xlim = r, bins = b, xlab = "Score",
main = "Super-awesome Fun-time Histogram of \"Heck Yeah!\"")
hist(y, col = "blue", density = TRUE, angle = 125, bins = b)
lines(dnorm(x), col = "red", lwd = 4)
lines(dnorm(y), col = "blue", lwd = 4)
legend("topright", legend = c("blue", "red"), fill = c("blue", "red"),
angle = c(125, 45), title = "Colors")
hx <- hist(x, plot = FALSE)
hy <- hist(y, plot = FALSE)
r <- range(hx$breaks, hy$breaks)
b <- seq(r[1], r[2], diff(r) / 11)
seq(1, 10, diff(c(1,10)) / 11)
hist(iris$Species)
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11))
"Super-awesome Fun-time Histogram of \"Heck Yeah!\""
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main=""Super-awesome Fun-time Histogram of \"Heck Yeah!\""")
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main=""Super-awesome Fun-time Histogram of \"Heck Yeah!\""")
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main=Super-awesome Fun-time Histogram of \"Heck Yeah!\"")
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main=Super-awesome Fun-time Histogram of \"Heck Yeah!\"")
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main="Super-awesome Fun-time Histogram of \"Heck Yeah!\"")
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main="Super-awesome Fun-time Histogram of \"Heck Yeah!\"", angle=125)
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main="Super-awesome Fun-time Histogram of \"Heck Yeah!\"", angle=125)
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main="Super-awesome Fun-time Histogram of \"Heck Yeah!\"", angle=125,col="red")
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main="Super-awesome Fun-time Histogram of \"Heck Yeah!\"", angle=125,col="red", density=50)
legend("topright", legend = c("blue", "red"), fill = c("blue", "red"),
angle = c(125, 45), title = "Colors")
legend("topright", legend = c("blue", "red"), fill = c("blue", "red"),
angle = c(125, 45), title = "Colors",density=c(30,50))
dnorm(iris$Sepal)
dnorm(iris$Sepal.Length)
curves(dnorm(iris$Sepal.Length), add=TRUE)
curve(dnorm(iris$Sepal.Length), add=TRUE)
curve(dnorm(x,mean(iris$Sepal.Length), sd(iris$Sepal.Length)), add=TRUE)
curve(dnorm(x,mean(iris$Sepal.Length), sd(iris$Sepal.Length)), add=TRUE, col="black")
curve(dnorm(x,mean(iris$Sepal.Length), sd(iris$Sepal.Length)), add=TRUE, col="black")
hist(iris$Sepal.Length,breaks=seq(1, 10, diff(c(1,10)) / 11), main="Super-awesome Fun-time Histogram of \"Heck Yeah!\"", angle=125,col="red", density=50)
curve(dnorm(x,mean(iris$Sepal.Length), sd(iris$Sepal.Length)), add=TRUE, col="black")
curve(dnorm(y,mean(iris$Sepal.Length), sd(iris$Sepal.Length)), add=TRUE, col="black")
my_trace <- function(A){
if(is.null(dim(A)) | nrow(A) != ncol(A)){
stop("A is not a square matrix")
}
sum <- 0
count_na <- 0
for(i in seq_len(nrow(A))){
if(!is.na(A[i,i])){
sum <- sum + A[i,i]
}else{
count_na <- count_na +1
}
}
count_na
sum$number of missing values in A <- count_na
T <- rbind(A[,1])
n <- 2
while(n<= ncol(A)){
T <- rbind(T,A[,n])
n <- n+1
}
sum$transpose <- T
}
my_trace(rbind(c(1,2,3),c(3,4,5),c(3,5,6)))
my_trace <- function(A){
if(is.null(dim(A)) | nrow(A) != ncol(A)){
stop("A is not a square matrix")
}
sum <- 0
count_na <- 0
for(i in seq_len(nrow(A))){
if(!is.na(A[i,i])){
sum <- sum + A[i,i]
}else{
count_na <- count_na +1
}
}
count_na
sum$number of missing values in A <- count_na
T <- rbind(A[,1])
n <- 2
while(n<= ncol(A)){
T <- rbind(T,A[,n])
n <- n+1
}
sum$transpose <- T
}
my_trace <- function(A){
if(is.null(dim(A)) | nrow(A) != ncol(A)){
stop("A is not a square matrix")
}
sum <- 0
count_na <- 0
for(i in seq_len(nrow(A))){
if(!is.na(A[i,i])){
sum <- sum + A[i,i]
}else{
count_na <- count_na +1
}
}
count_na
sum$number_of_missing_values_in_A <- count_na
T <- rbind(A[,1])
n <- 2
while(n<= ncol(A)){
T <- rbind(T,A[,n])
n <- n+1
}
sum$transpose <- T
}
my_trace(rbind(c(1,2,3),c(3,4,5),c(3,5,6)))
plot(y~x)
plot(k, 0.5 * k / 0.95)
k <- 0:100
plot(k, 0.5 * k / 0.95)
plot(k, 0.5 * k / 0.95, type="a")
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities")
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="1")
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type=1)
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="b")
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="p")
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="1")
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l")
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red")
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red")
plot(k, 0.5 * k / 0.05,type="l", col="blue", add=TRUE)
k <- 0:100
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red")
lines(k, 0.5 * k / 0.05,type="l", col="blue")
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red", ylim=c(0,1))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red", ylim=c(0,10))
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"))
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "prevalence of the disease among children(%)",
ylab= "relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend2 <- expression(P(B|A^c))
legend("topleft", c("P(B|A)", legend2),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend2 <- expression(P(B|A^c~))
legend("topleft", c("P(B|A)", legend2),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend2 <- expression(P\(B\|A^c~))
legend("topleft", c("P(B|A)", legend2),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend2 <- expression(P\(B\|A^c~))
legend("topleft", c("P(B|A)", legend2),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend2 <- expression(P(B|~A^c~))
legend("topleft", c("P(B|A)", legend2),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
legend2
legend2 <- expression(P(B|A^c))
legend2
legend2
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red", ylim=c(0,10))
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red")
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.06)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red")
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.08)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red")
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.15)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red")
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.15)
k <- 0:1
plot(k, 0.5 * k / 0.95, xlab= "Prevalence of the disease among children(%)",
ylab= "Relevant conditional probablities", type="l", col="red")
lines(k, 0.5 * k / 0.05,type="l", col="blue")
legend("topleft", c("P(B|A)", "P(B|A^c)"),
col=c("red", "blue"),
lty=c(1,1), lwd=c(1,1), inset=0.15)
install.packages("dplyr")
library(dplyr)
data <- data %>% filter(Genotype!="HET")
t.test(Center_Time~Genotype,data)
wilcox.test(Center_Time~Genotype,data)
data <- data %>% filter(Genotype!="HET")
library(ggplot2)
library(rlang)
library(cowplot)
library(ggpubr)
library(viridis)
library(tidyr)
library(dplyr)
data <- data %>% filter(Genotype!="HET")
data <- data %>% dplyr::filter(Genotype!="HET")
install.packages("tidyverse")
library(rlang)
library(cowplot)
library(ggpubr)
library(viridis)
library(tidyr)
library(dplyr)
library(tidyverse)
data <- data %>% filter(Genotype!="HET")
data <- filter(data, Genotype!="HET")
data <- filter(data, Genotype!="HET")
library(ggplot2)
library(rlang)
library(cowplot)
library(ggpubr)
library(viridis)
library(tidyr)
library(dplyr)
library(tidyverse)
setwd("Documents/slcspontaneous/SLC_Spontaneous_Rproj/")
data<-read.csv("SLC_Spontaneous_Open_Field_Analysis.csv", header=TRUE)
setwd("~/Documents/slcspontaneous")
setwd("~/Documents/slcspontaneous/Analysis_Files/")
data<-read.csv("SLC_Spontaneous_Open_Field_Analysis.csv", header=TRUE)
generate_boxplots <- function(input_data, X, Y, min,max){
data<-as.data.frame(input_data)
#Ensure correct ordering of levels
data$Genotype <- factor(data$Genotype, levels = c("WT", "HET", "MUT"))
ggplot(data=data,aes(x={{X}},y={{Y}}, fill={{X}})) +
#geom_violin(alpha=0.25,position=position_dodge(width=.75),size=1,color="black",draw_quantiles=c(0.5))+
geom_boxplot(alpha=0.25)+
scale_fill_viridis_d()+
geom_point(size=1,position=position_jitter(width=0.25),alpha=0.1)+
theme_cowplot(16) +
#ylim(min,max)+
#facet_grid(~Sex)+
theme(legend.position = "none")
}
max(data$Center.Entries)
c<-generate_boxplots(data, Genotype, Center.Entries,0,125)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)
c
e<-generate_boxplots(data, Genotype, Center.Entries,0,125)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)+
facet_grid(~Sex)
e
a<-generate_boxplots(data, Genotype, Center_Time,0,550)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)
a
#Distance vs Genotype
b<-generate_boxplots(data, Genotype, Distance,0,26)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)
b
#Center Time vs. Genotype
a<-generate_boxplots(data, Genotype, Center_Time,0,550)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)
a
#Distance vs Genotype
b<-generate_boxplots(data, Genotype, Distance,0,26)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)
b
#Center Entries vs Genotype
c<-generate_boxplots(data, Genotype, Center.Entries,0,125)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)
c
##aggregate Plots
## Stratify by Sex
d<-generate_boxplots(data, Genotype, Center_Time,0,550)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)+
facet_grid(~Sex)
d
e<-generate_boxplots(data, Genotype, Distance,0,26)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)+
facet_grid(~Sex)
e
f<-generate_boxplots(data, Genotype, Center.Entries,0,125)+
stat_compare_means(comparisons = list(c("WT", "HET"),
c("WT","MUT")),method="wilcox", vjust=0.3,label="p.signif",step.increase=0.05)+
facet_grid(~Sex)
f
plot_grid(a,b,c,d,e,f)
dev.new(width=15, height=10)
plot_grid(a,b,c,d,e,f)
data<-read.csv("SLC_Spontaneous_Open_Field_Analysis.csv", header=TRUE)
data <- data %>% filter(Genotype!="HET")
t.test(Center.Entries~Genotype,data)
wilcox.test(Center.Entries~Genotype,data)
